classDiagram
    %% Aggregate Roots
    class GameState {
        <<Aggregate Root>>
        +Player player
        +PlayerState playerState
        +GameTime time
        +Season season
        +String currentLocationId
        +EventHistory eventHistory
        +advanceTime() GameState
        +changeSeason(Season) GameState
        +moveTo(String) GameState
        +recordEvent(String) GameState
        +modifyStat(String, int) GameState
        +modifyRelationship(String, int) GameState
    }

    class Player {
        <<Entity>>
        +String id
        +String name
        +Stats stats
        +Relationships relationships
        +Map~String,dynamic~ flags
        +modifyStat(String, int) Player
        +modifyRelationship(String, int) Player
        +setFlag(String, dynamic) Player
    }

    %% Value Objects
    class GameTime {
        <<Value Object>>
        +int week
        +Weekday weekday
        +TimeOfDay period
        +advance() GameTime
        +advanceToNextDay() GameTime
        +isWeekend() bool
        +isWorkday() bool
    }

    class Stats {
        <<Value Object>>
        -Map~String,int~ _values
        +get(String) int
        +modify(String, int) Stats
        +set(String, int) Stats
        +initial()$ Stats
    }

    class Relationships {
        <<Value Object>>
        -Map~String,Relationship~ _data
        +get(String) Relationship?
        +modify(String, int) Relationships
        +getAll() List~Relationship~
    }

    class Relationship {
        <<Value Object>>
        +String characterId
        +int affection
        +modify(int) Relationship
    }

    class PlayerState {
        <<Value Object>>
        +Inventory inventory
        +String? wearing
        +Set~String~ statusEffects
        +hasItem(String) bool
        +equipItem(String) PlayerState
        +addStatus(String) PlayerState
    }

    class Inventory {
        <<Value Object>>
        -Map~String,int~ _items
        +hasItem(String) bool
        +getCount(String) int
        +addItem(String, int) Inventory
        +removeItem(String, int) Inventory
    }

    class EventHistory {
        <<Value Object>>
        -Map~String,int~ _triggerCount
        +hasTriggered(String) bool
        +getTriggerCount(String) int
        +recordTrigger(String) EventHistory
    }

    class Location {
        <<Entity>>
        +String id
        +String? parentId
        +isChildOf(String) bool
        +isRoot() bool
    }

    %% Enums
    class Season {
        <<enumeration>>
        spring
        summer
        autumn
        winter
    }

    class Weekday {
        <<enumeration>>
        monday
        tuesday
        wednesday
        thursday
        friday
        saturday
        sunday
    }

    class TimeOfDay {
        <<enumeration>>
        morning
        afternoon
        evening
        night
    }

    %% Relationships - GameState 為核心
    GameState *-- Player : contains
    GameState *-- PlayerState : contains
    GameState *-- GameTime : contains
    GameState *-- EventHistory : contains
    GameState --> Season : has
    GameState --> Location : references by id

    %% Player 包含的 Value Objects
    Player *-- Stats : contains
    Player *-- Relationships : contains

    %% Relationships 包含多個 Relationship
    Relationships *-- "0..*" Relationship : contains

    %% PlayerState 包含 Inventory
    PlayerState *-- Inventory : contains

    %% GameTime 使用 Enums
    GameTime --> Weekday : uses
    GameTime --> TimeOfDay : uses

    %% Location 的父子關係
    Location --> Location : parent-child

    %% 註解
    note for GameState "核心 Aggregate Root<br />協調所有領域物件<br />只存 locationId 不存整個 Location"
    note for Location "Entity with parent-child<br />支援層級結構 (home > kitchen > stove)"
    note for Stats "完全彈性的 Map<br />可新增任意屬性<br />預設: stamina, charm, intelligence, mood"
    note for Season "獨立欄位<br />透過事件切換<br />不隨時間自動變化"